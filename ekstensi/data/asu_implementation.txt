#include "ASUContainer.hpp"
#include <iostream>
#include <sstream>
#include <iomanip>
#include <algorithm>
#include <regex>
#include <cstring>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <archive.h>
#include <archive_entry.h>

namespace ASUSystem {

SecurityValidator::SecurityValidator() {
    blocked_commands = {
        "rm", "sudo", "chmod", "chown", "dd", "mkfs", "fdisk",
        "iptables", "systemctl", "service", "kill", "killall"
    };
    safe_extensions = {
        ".cpp", ".hpp", ".h", ".c", ".py", ".js", ".java", 
        ".txt", ".md", ".json", ".xml", ".yml", ".yaml"
    };
}

bool SecurityValidator::validateGitURL(const std::string& url) {
    std::regex git_pattern(R"(^https://[\w\-\.]+/[\w\-\.]+/[\w\-\.]+\.git$)");
    return std::regex_match(url, git_pattern);
}

bool SecurityValidator::isRepositoryValid(const std::string& url) {
    if (!validateGitURL(url)) return false;
    
    std::string command = "git ls-remote --heads " + url + " > /dev/null 2>&1";
    int result = system(command.c_str());
    return (result == 0);
}

bool SecurityValidator::validateCommand(const std::string& command) {
    for (const auto& blocked : blocked_commands) {
        if (command.find(blocked) != std::string::npos) {
            return false;
        }
    }
    return true;
}

std::string SecurityValidator::sanitizeInput(const std::string& input) {
    std::string sanitized = input;
    std::regex dangerous_chars(R"([;&|`$\(\)<>])");
    sanitized = std::regex_replace(sanitized, dangerous_chars, "");
    return sanitized;
}

EnvironmentIsolator::EnvironmentIsolator(const std::string& base_path) 
    : sandbox_path(base_path) {
    Utils::createDirectoryRecursive(sandbox_path);
}

std::string EnvironmentIsolator::createIsolatedEnvironment(const std::string& container_id) {
    std::lock_guard<std::mutex> lock(isolation_mutex);
    
    std::string env_path = Utils::joinPath({sandbox_path, container_id});
    Utils::createDirectoryRecursive(env_path);
    
    environment_vars["PATH"] = "/usr/local/bin:/usr/bin:/bin";
    environment_vars["HOME"] = env_path;
    environment_vars["TMPDIR"] = env_path + "/tmp";
    
    Utils::createDirectoryRecursive(environment_vars["TMPDIR"]);
    
    return env_path;
}

bool EnvironmentIsolator::setupVirtualEnvironment(const std::string& env_path) {
    std::string venv_cmd = "python3 -m venv " + env_path + "/venv";
    return (system(venv_cmd.c_str()) == 0);
}

void EnvironmentIsolator::cleanupEnvironment(const std::string& env_path) {
    std::string cleanup_cmd = "rm -rf " + env_path;
    system(cleanup_cmd.c_str());
}

bool EnvironmentIsolator::executeInSandbox(const std::string& command, const std::string& working_dir) {
    pid_t pid = fork();
    
    if (pid == 0) {
        chdir(working_dir.c_str());
        
        for (const auto& env_var : environment_vars) {
            setenv(env_var.first.c_str(), env_var.second.c_str(), 1);
        }
        
        execl("/bin/sh", "sh", "-c", command.c_str(), (char*)NULL);
        exit(1);
    } else if (pid > 0) {
        int status;
        waitpid(pid, &status, 0);
        return WIFEXITED(status) && WEXITSTATUS(status) == 0;
    }
    
    return false;
}

ASUContainer::ASUContainer() 
    : security(std::make_unique<SecurityValidator>()),
      isolator(std::make_unique<EnvironmentIsolator>("/tmp/asu_sandbox")) {
    metadata["created_at"] = Utils::getCurrentTimestamp();
    metadata["version"] = "1.0.0";
    metadata["max_size"] = static_cast<Json::UInt64>(MAX_CONTAINER_SIZE);
}

ASUContainer::~ASUContainer() {
    if (!container_id.empty()) {
        isolator->cleanupEnvironment("/tmp/asu_sandbox/" + container_id);
    }
}

std::string ASUContainer::generateSHA256(const std::string& input) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, input.c_str(), input.size());
    SHA256_Final(hash, &sha256);
    
    std::stringstream ss;
    for (int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }
    
    return ss.str();
}

bool ASUContainer::createContainer(const std::string& git_url) {
    if (!security->isRepositoryValid(git_url)) {
        return false;
    }
    
    this->git_url = git_url;
    this->sha256_hash = generateSHA256(git_url + Utils::getCurrentTimestamp());
    this->container_id = sha256_hash.substr(0, 16);
    this->file_path = "/tmp/asu_containers/" + sha256_hash + ".asu";
    
    Utils::createDirectoryRecursive("/tmp/asu_containers");
    
    std::string isolated_env = isolator->createIsolatedEnvironment(container_id);
    std::string clone_path = isolated_env + "/repo";
    
    if (!cloneRepository(git_url, clone_path)) {
        return false;
    }
    
    if (!packageToASU(clone_path)) {
        return false;
    }
    
    metadata["git_url"] = git_url;
    metadata["container_id"] = container_id;
    metadata["sha256"] = sha256_hash;
    metadata["file_path"] = file_path;
    metadata["clone_path"] = clone_path;
    
    return true;
}

bool ASUContainer::cloneRepository(const std::string& url, const std::string& target_path) {
    std::string clone_cmd = "git clone " + url + " " + target_path;
    
    if (!security->validateCommand(clone_cmd)) {
        return false;
    }
    
    return isolator->executeInSandbox(clone_cmd, "/tmp");
}

bool ASUContainer::packageToASU(const std::string& source_path) {
    struct archive* archive_writer;
    struct archive_entry* entry;
    
    archive_writer = archive_write_new();
    archive_write_add_filter_gzip(archive_writer);
    archive_write_set_format_pax_restricted(archive_writer);
    archive_write_open_filename(archive_writer, file_path.c_str());
    
    std::filesystem::recursive_directory_iterator dir_iter(source_path);
    
    for (const auto& file_entry : dir_iter) {
        if (file_entry.is_regular_file()) {
            std::string relative_path = std::filesystem::relative(file_entry.path(), source_path);
            
            entry = archive_entry_new();
            archive_entry_set_pathname(entry, relative_path.c_str());
            archive_entry_set_size(entry, std::filesystem::file_size(file_entry.path()));
            archive_entry_set_filetype(entry, AE_IFREG);
            archive_entry_set_perm(entry, 0644);
            
            archive_write_header(archive_writer, entry);
            
            std::ifstream file(file_entry.path(), std::ios::binary);
            char buffer[8192];
            while (file.read(buffer, sizeof(buffer)) || file.gcount() > 0) {
                archive_write_data(archive_writer, buffer, file.gcount());
            }
            
            archive_entry_free(entry);
        }
    }
    
    archive_write_close(archive_writer);
    archive_write_free(archive_writer);
    
    return Utils::fileExists(file_path);
}

bool ASUContainer::extractFromASU(const std::string& target_path) {
    struct archive* archive_reader;
    struct archive_entry* entry;
    
    archive_reader = archive_read_new();
    archive_read_support_filter_gzip(archive_reader);
    archive_read_support_format_all(archive_reader);
    
    if (archive_read_open_filename(archive_reader, file_path.c_str()) != ARCHIVE_OK) {
        archive_read_free(archive_reader);
        return false;
    }
    
    Utils::createDirectoryRecursive(target_path);
    
    while (archive_read_next_header(archive_reader, &entry) == ARCHIVE_OK) {
        std::string full_path = Utils::joinPath({target_path, archive_entry_pathname(entry)});
        
        std::ofstream output_file(full_path, std::ios::binary);
        const void* buffer;
        size_t size;
        la_int64_t offset;
        
        while (archive_read_data_block(archive_reader, &buffer, &size, &offset) == ARCHIVE_OK) {
            output_file.write(static_cast<const char*>(buffer), size);
        }
        
        output_file.close();
    }
    
    archive_read_close(archive_reader);
    archive_read_free(archive_reader);
    
    return true;
}

bool ASUContainer::executeProgram(const std::string& command) {
    if (!security->validateCommand(command)) {
        return false;
    }
    
    std::string sanitized_cmd = security->sanitizeInput(command);
    std::string execution_path = "/tmp/asu_sandbox/" + container_id + "/execution";
    
    Utils::createDirectoryRecursive(execution_path);
    
    if (!extractFromASU(execution_path)) {
        return false;
    }
    
    return isolator->executeInSandbox(sanitized_cmd, execution_path);
}

bool ASUContainer::validateContainerIntegrity() {
    if (!Utils::fileExists(file_path)) {
        return false;
    }
    
    size_t file_size = Utils::getFileSize(file_path);
    return (file_size > 0 && file_size <= MAX_CONTAINER_SIZE);
}

APIServer::APIServer(int server_port) : port(server_port) {}

APIServer::~APIServer() {
    stopServer();
}

bool APIServer::startServer() {
    std::cout << "Server memulai pada port " << port << std::endl;
    return true;
}

void APIServer::stopServer() {
    std::cout << "Server dihentikan" << std::endl;
}

APIServer::HTTPResponse APIServer::handleGetContainer(const std::string& sha256_id) {
    std::lock_guard<std::mutex> lock(containers_mutex);
    
    auto container_iter = containers.find(sha256_id);
    if (container_iter == containers.end()) {
        return {404, "application/json", createErrorResponse("Container tidak ditemukan"), {}};
    }
    
    Json::Value response_data;
    response_data["container_id"] = container_iter->second->getContainerID();
    response_data["container_path"] = container_iter->second->getContainerPath();
    response_data["container_size"] = static_cast<Json::UInt64>(container_iter->second->getContainerSize());
    response_data["metadata"] = container_iter->second->getMetadata();
    
    return {200, "application/json", createJSONResponse(response_data), {}};
}

APIServer::HTTPResponse APIServer::handlePostContainer(const std::string& git_url) {
    auto new_container = std::make_shared<ASUContainer>();
    
    if (!new_container->createContainer(git_url)) {
        return {400, "application/json", createErrorResponse("Gagal membuat container"), {}};
    }
    
    std::lock_guard<std::mutex> lock(containers_mutex);
    std::string sha256_id = new_container->generateSHA256(git_url + Utils::getCurrentTimestamp());
    containers[sha256_id] = new_container;
    
    Json::Value response_data;
    response_data["message"] = "Container berhasil dibuat";
    response_data["container_id"] = sha256_id;
    response_data["container_path"] = new_container->getContainerPath();
    
    return {201, "application/json", createJSONResponse(response_data), {}};
}

APIServer::HTTPResponse APIServer::handleExecuteContainer(const std::string& sha256_id, const std::string& command) {
    std::lock_guard<std::mutex> lock(containers_mutex);
    
    auto container_iter = containers.find(sha256_id);
    if (container_iter == containers.end()) {
        return {404, "application/json", createErrorResponse("Container tidak ditemukan"), {}};
    }
    
    bool execution_success = container_iter->second->executeProgram(command);
    
    Json::Value response_data;
    response_data["message"] = execution_success ? "Eksekusi berhasil" : "Eksekusi gagal";
    response_data["command"] = command;
    response_data["success"] = execution_success;
    
    return {200, "application/json", createJSONResponse(response_data), {}};
}

std::string APIServer::createJSONResponse(const Json::Value& data, int status) {
    Json::Value response;
    response["status"] = status;
    response["data"] = data;
    
    Json::StreamWriterBuilder builder;
    return Json::writeString(builder, response);
}

std::string APIServer::createErrorResponse(const std::string& error, int status) {
    Json::Value response;
    response["status"] = status;
    response["error"] = error;
    
    Json::StreamWriterBuilder builder;
    return Json::writeString(builder, response);
}

namespace Utils {

std::string getCurrentTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto time_t = std::chrono::system_clock::to_time_t(now);
    
    std::stringstream ss;
    ss << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S");
    return ss.str();
}

bool createDirectoryRecursive(const std::string& path) {
    return std::filesystem::create_directories(path);
}

std::vector<std::string> splitString(const std::string& str, char delimiter) {
    std::vector<std::string> tokens;
    std::stringstream ss(str);
    std::string token;
    
    while (std::getline(ss, token, delimiter)) {
        tokens.push_back(token);
    }
    
    return tokens;
}

std::string joinPath(const std::vector<std::string>& components) {
    std::filesystem::path result;
    for (const auto& component : components) {
        result /= component;
    }
    return result.string();
}

bool fileExists(const std::string& path) {
    return std::filesystem::exists(path);
}

size_t getFileSize(const std::string& path) {
    return std::filesystem::file_size(path);
}

std::string readFileContent(const std::string& path) {
    std::ifstream file(path);
    std::stringstream buffer;
    buffer << file.rdbuf();
    return buffer.str();
}

bool writeFileContent(const std::string& path, const std::string& content) {
    std::ofstream file(path);
    file << content;
    return file.good();
}

}

}