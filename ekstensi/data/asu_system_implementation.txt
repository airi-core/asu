/*
 * ASU Container System Implementation
 * 
 * Nama: Susanto
 * NIM: 206181
 * Universitas: Hidden Investor
 * Pembimbing: Suwardjono
 * Rektor: Martin
 */

#include "asu_container.hpp"
#include <sstream>
#include <iomanip>
#include <cstring>
#include <sys/wait.h>
#include <thread>
#include <chrono>

// ASUContainer Implementation
ASUContainer::ASUContainer() {
    // Initialize metadata with project information
    metadata["author"] = "Susanto";
    metadata["nim"] = "206181";
    metadata["university"] = "Hidden Investor";
    metadata["supervisor"] = "Suwardjono";
    metadata["rector"] = "Martin";
    metadata["created_at"] = ASUUtils::getCurrentTimestamp();
    metadata["version"] = "1.0.0";
}

ASUContainer::~ASUContainer() {
    // Cleanup temporary files if any
    if (!container_path.empty() && container_path.find("/tmp/") == 0) {
        fs::remove_all(container_path);
    }
}

std::string ASUContainer::calculateSHA256(const std::string& data) {
    unsigned char hash[SHA256_DIGEST_LENGTH];
    SHA256_CTX sha256;
    SHA256_Init(&sha256);
    SHA256_Update(&sha256, data.c_str(), data.length());
    SHA256_Final(hash, &sha256);
    
    std::stringstream ss;
    for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
        ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
    }
    return ss.str();
}

bool ASUContainer::cloneAndStore(const std::string& git_url, const std::string& destination) {
    try {
        // Validate git URL
        if (!validateRepository(git_url)) {
            std::cerr << "Invalid Git repository URL: " << git_url << std::endl;
            return false;
        }
        
        // Create temporary directory
        std::string temp_dir = ASUConstants::TEMP_DIR_PREFIX + std::to_string(std::time(nullptr));
        fs::create_directories(temp_dir);
        
        // Execute git clone
        std::string clone_command = "git clone --recursive " + git_url + " " + temp_dir + "/repo";
        std::string clone_result = executeCommand(clone_command);
        
        if (clone_result.find("fatal:") != std::string::npos) {
            std::cerr << "Git clone failed: " << clone_result << std::endl;
            fs::remove_all(temp_dir);
            return false;
        }
        
        // Verify cloned repository
        std::string repo_path = temp_dir + "/repo";
        if (!ASUUtils::isValidGitRepository(repo_path)) {
            std::cerr << "Cloned directory is not a valid Git repository" << std::endl;
            fs::remove_all(temp_dir);
            return false;
        }
        
        // Calculate SHA256 hash
        std::string repo_content = executeCommand("find " + repo_path + " -type f -exec cat {} \\;");
        sha256_hash = calculateSHA256(repo_content + git_url);
        
        // Set container path
        container_path = temp_dir;
        
        // Store metadata
        metadata["git_url"] = git_url;
        metadata["clone_date"] = ASUUtils::getCurrentTimestamp();
        metadata["repo_size"] = std::to_string(fs::file_size(repo_path));
        
        std::cout << "Successfully cloned repository: " << git_url << std::endl;
        std::cout << "Container SHA256: " << sha256_hash << std::endl;
        
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "Error in cloneAndStore: " << e.what() << std::endl;
        return false;
    }
}

bool ASUContainer::createArchive(const std::string& source_dir, const std::string& output_file) {
    struct archive *a;
    struct archive_entry *entry;
    struct stat st;
    char buff[8192];
    int len;
    
    a = archive_write_new();
    archive_write_add_filter_gzip(a);
    archive_write_set_format_pax_restricted(a);
    archive_write_open_filename(a, output_file.c_str());
    
    try {
        for (const auto& dir_entry : fs::recursive_directory_iterator(source_dir)) {
            if (dir_entry.is_regular_file()) {
                std::string relative_path = fs::relative(dir_entry.path(), source_dir);
                
                entry = archive_entry_new();
                archive_entry_set_pathname(entry, relative_path.c_str());
                archive_entry_set_size(entry, fs::file_size(dir_entry.path()));
                archive_entry_set_filetype(entry, AE_IFREG);
                archive_entry_set_perm(entry, 0644);
                archive_write_header(a, entry);
                
                std::ifstream file(dir_entry.path(), std::ios::binary);
                while (file.read(buff, sizeof(buff))) {
                    archive_write_data(a, buff, file.gcount());
                }
                if (file.gcount() > 0) {
                    archive_write_data(a, buff, file.gcount());
                }
                file.close();
                
                archive_entry_free(entry);
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Error creating archive: " << e.what() << std::endl;
        archive_write_close(a);
        archive_write_free(a);
        return false;
    }
    
    archive_write_close(a);
    archive_write_free(a);
    return true;
}

bool ASUContainer::extractArchive(const std::string& archive_file, const std::string& output_dir) {
    struct archive *a;
    struct archive_entry *entry;
    int r;
    
    a = archive_read_new();
    archive_read_support_filter_gzip(a);
    archive_read_support_format_all(a);
    
    r = archive_read_open_filename(a, archive_file.c_str(), 10240);
    if (r != ARCHIVE_OK) {
        archive_read_free(a);
        return false;
    }
    
    fs::create_directories(output_dir);
    
    while (archive_read_next_header(a, &entry) == ARCHIVE_OK) {
        std::string full_path = output_dir + "/" + archive_entry_pathname(entry);
        
        fs::create_directories(fs::path(full_path).parent_path());
        
        std::ofstream outfile(full_path, std::ios::binary);
        const void *buff;
        size_t size;
        la_int64_t offset;
        
        while (archive_read_data_block(a, &buff, &size, &offset) == ARCHIVE_OK) {
            outfile.write(static_cast<const char*>(buff), size);
        }
        outfile.close();
    }
    
    archive_read_close(a);
    archive_read_free(a);
    return true;
}

std::string ASUContainer::executeCommand(const std::string& command) {
    std::string result;
    FILE* pipe = popen(command.c_str(), "r");
    
    if (!pipe) {
        return "ERROR: Cannot execute command";
    }
    
    char buffer[128];
    while (fgets(buffer, sizeof(buffer), pipe) != nullptr) {
        result += buffer;
    }
    
    pclose(pipe);
    return result;
}

bool ASUContainer::validateRepository(const std::string& repo_url) {
    // Basic validation for git repository URL
    if (repo_url.empty()) return false;
    
    // Check if URL contains git patterns
    return (repo_url.find(".git") != std::string::npos) ||
           (repo_url.find("github.com") != std::string::npos) ||
           (repo_url.find("gitlab.com") != std::string::npos) ||
           (repo_url.find("bitbucket.org") != std::string::npos);
}

bool ASUContainer::loadContainer(const std::string& asu_file_path) {
    try {
        if (!ASUUtils::fileExists(asu_file_path)) {
            std::cerr << "ASU file not found: " << asu_file_path << std::endl;
            return false;
        }
        
        // Create temporary extraction directory
        std::string temp_dir = ASUConstants::TEMP_DIR_PREFIX + std::to_string(std::time(nullptr));
        fs::create_directories(temp_dir);
        
        // Extract ASU container
        if (!extractArchive(asu_file_path, temp_dir)) {
            std::cerr << "Failed to extract ASU container" << std::endl;
            fs::remove_all(temp_dir);
            return false;
        }
        
        container_path = temp_dir;
        
        // Load metadata if exists
        std::string metadata_path = temp_dir + "/" + ASUConstants::METADATA_FILE;
        if (ASUUtils::fileExists(metadata_path)) {
            std::ifstream metadata_file(metadata_path);
            // Parse JSON metadata (simplified implementation)
            std::string line;
            while (std::getline(metadata_file, line)) {
                // Basic key-value parsing
                size_t pos = line.find(':');
                if (pos != std::string::npos) {
                    std::string key = line.substr(0, pos);
                    std::string value = line.substr(pos + 1);
                    // Remove quotes and whitespace
                    key.erase(0, key.find_first_not_of(" \t\""));
                    key.erase(key.find_last_not_of(" \t\"") + 1);
                    value.erase(0, value.find_first_not_of(" \t\""));
                    value.erase(value.find_last_not_of(" \t\",") + 1);
                    metadata[key] = value;
                }
            }
        }
        
        std::cout << "Successfully loaded ASU container: " << asu_file_path << std::endl;
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "Error loading container: " << e.what() << std::endl;
        return false;
    }
}

bool ASUContainer::executeProgram(const std::string& command, const std::vector<std::string>& args) {
    try {
        if (container_path.empty()) {
            std::cerr << "No container loaded" << std::endl;
            return false;
        }
        
        std::string repo_path = container_path + "/repo";
        if (!fs::exists(repo_path)) {
            std::cerr << "Repository not found in container" << std::endl;
            return false;
        }
        
        // Change to repository directory
        std::string old_cwd = fs::current_path();
        fs::current_path(repo_path);
        
        std::string exec_command;
        if (command.empty()) {
            // Try to find and execute common build/run commands
            if (fs::exists("Makefile")) {
                exec_command = "make && make run";
            } else if (fs::exists("CMakeLists.txt")) {
                exec_command = "mkdir -p build && cd build && cmake .. && make";
            } else if (fs::exists("package.json")) {
                exec_command = "npm install && npm start";
            } else if (fs::exists("requirements.txt")) {
                exec_command = "pip install -r requirements.txt && python main.py";
            } else {
                std::cerr << "No recognizable build system found" << std::endl;
                fs::current_path(old_cwd);
                return false;
            }
        } else {
            exec_command = command;
            for (const auto& arg : args) {
                exec_command += " " + arg;
            }
        }
        
        std::cout << "Executing: " << exec_command << std::endl;
        std::string result = executeCommand(exec_command);
        std::cout << result << std::endl;
        
        // Restore original directory
        fs::current_path(old_cwd);
        
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "Error executing program: " << e.what() << std::endl;
        return false;
    }
}

bool ASUContainer::saveContainer(const std::string& output_path) {
    try {
        if (container_path.empty() || sha256_hash.empty()) {
            std::cerr << "No container data to save" << std::endl;
            return false;
        }
        
        // Create metadata file
        std::string metadata_path = container_path + "/" + ASUConstants::METADATA_FILE;
        std::ofstream metadata_file(metadata_path);
        metadata_file << "{\n";
        for (const auto& pair : metadata) {
            metadata_file << "  \"" << pair.first << "\": \"" << pair.second << "\",\n";
        }
        metadata_file << "  \"sha256\": \"" << sha256_hash << "\"\n";
        metadata_file << "}\n";
        metadata_file.close();
        
        // Determine output file path
        std::string output_file = output_path;
        if (output_file.empty()) {
            output_file = sha256_hash + ASUConstants::ASU_EXTENSION;
        }
        
        // Create archive
        if (!createArchive(container_path, output_file)) {
            std::cerr << "Failed to create ASU container archive" << std::endl;
            return false;
        }
        
        // Verify file size doesn't exceed 1TB limit
        if (fs::file_size(output_file) > ASUConstants::MAX_CONTAINER_SIZE) {
            std::cerr << "Container size exceeds 1TB limit" << std::endl;
            fs::remove(output_file);
            return false;
        }
        
        std::cout << "Container saved successfully: " << output_file << std::endl;
        std::cout << "Size: " << fs::file_size(output_file) << " bytes" << std::endl;
        
        return true;
        
    } catch (const std::exception& e) {
        std::cerr << "Error saving container: " << e.what() << std::endl;
        return false;
    }
}

void ASUContainer::setMetadata(const std::string& key, const std::string& value) {
    metadata[key] = value;
}

std::string ASUContainer::getMetadata(const std::string& key) {
    auto it = metadata.find(key);
    return (it != metadata.end()) ? it->second : "";
}

json::value ASUContainer::getContainerInfo() {
    json::value info = json::value::object();
    
    info["sha256"] = json::value::string(sha256_hash);
    info["container_path"] = json::value::string(container_path);
    
    json::value metadata_json = json::value::object();
    for (const auto& pair : metadata) {
        metadata_json[pair.first] = json::value::string(pair.second);
    }
    info["metadata"] = metadata_json;
    
    return info;
}

std::vector<std::string> ASUContainer::listFiles() {
    std::vector<std::string> files;
    
    if (container_path.empty()) {
        return files;
    }
    
    try {
        for (const auto& entry : fs::recursive_directory_iterator(container_path)) {
            if (entry.is_regular_file()) {
                files.push_back(fs::relative(entry.path(), container_path));
            }
        }
    } catch (const std::exception& e) {
        std::cerr << "Error listing files: " << e.what() << std::endl;
    }
    
    return files;
}

std::string ASUContainer::getFileContent(const std::string& file_path) {
    if (container_path.empty()) {
        return "";
    }
    
    std::string full_path = container_path + "/" + file_path;
    if (!ASUUtils::fileExists(full_path)) {
        return "";
    }
    
    std::ifstream file(full_path);
    std::string content((std::istreambuf_iterator<char>(file)),
                        std::istreambuf_iterator<char>());
    return content;
}

// ASUAPIServer Implementation
ASUAPIServer::ASUAPIServer(const std::string& address, int port) 
    : server_address(address), server_port(port) {
    
    std::string listen_address = address + ":" + std::to_string(port);
    listener = std::make_unique<http_listener>(listen_address);
    
    setupRoutes();
}

ASUAPIServer::~ASUAPIServer() {
    stopServer();
}

void ASUAPIServer::setupRoutes() {
    listener->support(methods::GET, [this](http_request request) {
        handleGet(request);
    });
    
    listener->support(methods::POST, [this](http_request request) {
        handlePost(request);
    });
    
    listener->support(methods::PUT, [this](http_request request) {
        handlePut(request);
    });
    
    listener->support(methods::DEL, [this](http_request request) {
        handleDelete(request);
    });
}

bool ASUAPIServer::startServer() {
    try {
        listener->open().wait();
        std::cout << "ASU API Server started at " << server_address << ":" << server_port << std::endl;
        return true;
    } catch (const std::exception& e) {
        std::cerr << "Failed to start server: " << e.what() << std::endl;
        return false;
    }
}

void ASUAPIServer::stopServer() {
    try {
        listener->close().wait();
        std::cout << "ASU API Server stopped" << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error stopping server: " << e.what() << std::endl;
    }
}

void ASUAPIServer::handleGet(http_request request) {
    auto path = request.relative_uri().path();
    
    // Remove leading slash
    if (path.front() == '/') {
        path = path.substr(1);
    }
    
    json::value response;
    
    if (path.empty()) {
        // List all containers
        response = json::value::array();
        int index = 0;
        for (const auto& container_pair : containers) {
            response[index++] = json::value::string(container_pair.first);
        }
    } else if (path.find(".asu") != std::string::npos) {
        // Get specific container info
        auto it = containers.find(path);
        if (it != containers.end()) {
            response = it->second->getContainerInfo();
        } else {
            response["error"] = json::value::string("Container not found");
        }
    } else {
        response["error"] = json::value::string("Invalid endpoint");
    }
    
    request.reply(status_codes::OK, response);
}

void ASUAPIServer::handlePost(http_request request) {
    request.extract_json().then([=](json::value body) {
        json::value response;
        
        try {
            std::string git_url = body["git_url"].as_string();
            
            auto container = std::make_shared<ASUContainer>();
            if (container->cloneAndStore(git_url)) {
                std::string sha256 = container->getSHA256Hash();
                std::string asu_file = sha256 + ".asu";
                
                if (container->saveContainer(asu_file)) {
                    containers[asu_file] = container;
                    response["success"] = json::value::boolean(true);
                    response["sha256"] = json::value::string(sha256);
                    response["file"] = json::value::string(asu_file);
                } else {
                    response["error"] = json::value::string("Failed to save container");
                }
            } else {
                response["error"] = json::value::string("Failed to clone repository");
            }
        } catch (const std::exception& e) {
            response["error"] = json::value::string(e.what());
        }
        
        request.reply(status_codes::OK, response);
    });
}

void ASUAPIServer::handlePut(http_request request) {
    auto path = request.relative_uri().path();
    if (path.front() == '/') {
        path = path.substr(1);
    }
    
    request.extract_json().then([=](json::value body) {
        json::value response;
        
        auto it = containers.find(path);
        if (it != containers.end()) {
            try {
                std::string command = body["command"].as_string();
                std::vector<std::string> args;
                
                if (body.has_field("args") && body["args"].is_array()) {
                    auto args_array = body["args"].as_array();
                    for (const auto& arg : args_array) {
                        args.push_back(arg.as_string());
                    }
                }
                
                bool success = it->second->executeProgram(command, args);
                response["success"] = json::value::boolean(success);
            } catch (const std::exception& e) {
                response["error"] = json::value::string(e.what());
            }
        } else {
            response["error"] = json::value::string("Container not found");
        }
        
        request.reply(status_codes::OK, response);
    });
}

void ASUAPIServer::handleDelete(http_request request) {
    auto path = request.relative_uri().path();
    if (path.front() == '/') {
        path = path.substr(1);
    }
    
    json::value response;
    
    auto it = containers.find(path);
    if (it != containers.end()) {
        containers.erase(it);
        fs::remove(path); // Remove the .asu file
        response["success"] = json::value::boolean(true);
    } else {
        response["error"] = json::value::string("Container not found");
    }
    
    request.reply(status_codes::OK, response);
}

bool ASUAPIServer::loadContainer(const std::string& asu_file_path) {
    auto container = std::make_shared<ASUContainer>();
    if (container->loadContainer(asu_file_path)) {
        std::string filename = fs::path(asu_file_path).filename();
        containers[filename] = container;
        return true;
    }
    return false;
}

// Utility Functions Implementation
namespace ASUUtils {
    std::string generateSHA256(const std::string& input) {
        unsigned char hash[SHA256_DIGEST_LENGTH];
        SHA256_CTX sha256;
        SHA256_Init(&sha256);
        SHA256_Update(&sha256, input.c_str(), input.length());
        SHA256_Final(hash, &sha256);
        
        std::stringstream ss;
        for(int i = 0; i < SHA256_DIGEST_LENGTH; i++) {
            ss << std::hex << std::setw(2) << std::setfill('0') << (int)hash[i];
        }
        return ss.str();
    }
    
    bool fileExists(const std::string& path) {
        return fs::exists(path) && fs::is_regular_file(path);
    }
    
    bool directoryExists(const std::string& path) {
        return fs::exists(path) && fs::is_directory(path);
    }
    
    std::string getCurrentTimestamp() {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::stringstream ss;
        ss << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S");
        return ss.str();
    }
    
    bool isValidGitRepository(const std::string& path) {
        return directoryExists(path + "/.git");
    }
    
    std::vector<std::string> splitString(const std::string& str, char delimiter) {
        std::vector<std::string> tokens;
        std::stringstream ss(str);
        std::string token;
        
        while (std::getline(ss, token, delimiter)) {
            tokens.push_back(token);
        }
        
        return tokens;
    }
}