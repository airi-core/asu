# ASU Container System Makefile
# 
# Nama: Susanto
# NIM: 206181
# Universitas: Hidden Investor
# Pembimbing: Suwardjono
# Rektor: Martin

# Compiler settings
CXX = g++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2 -g
LDFLAGS = -lssl -lcrypto -larchive -lcpprest -lpthread

# Project settings
PROJECT_NAME = asu_container
SOURCE_DIR = src
BUILD_DIR = build
TARGET = $(BUILD_DIR)/$(PROJECT_NAME)

# Source files
SOURCES = main.cpp asu_container.cpp
HEADERS = asu_container.hpp
OBJECTS = $(SOURCES:%.cpp=$(BUILD_DIR)/%.o)

# Default target
.PHONY: all clean install uninstall test run help

all: $(TARGET)

# Create build directory
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

# Compile object files
$(BUILD_DIR)/%.o: %.cpp $(HEADERS) | $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Link executable
$(TARGET): $(OBJECTS)
	$(CXX) $(OBJECTS) -o $@ $(LDFLAGS)
	@echo "Build completed successfully!"
	@echo "Executable: $(TARGET)"

# Clean build files
clean:
	rm -rf $(BUILD_DIR)
	rm -f *.asu
	rm -rf /tmp/asu_*
	@echo "Clean completed!"

# Install system-wide (requires sudo)
install: $(TARGET)
	sudo cp $(TARGET) /usr/local/bin/$(PROJECT_NAME)
	sudo chmod +x /usr/local/bin/$(PROJECT_NAME)
	@echo "Installation completed!"
	@echo "You can now run '$(PROJECT_NAME)' from anywhere"

# Uninstall system-wide (requires sudo)
uninstall:
	sudo rm -f /usr/local/bin/$(PROJECT_NAME)
	@echo "Uninstallation completed!"

# Development build with debug symbols
debug: CXXFLAGS += -DDEBUG -g3 -fsanitize=address
debug: LDFLAGS += -fsanitize=address
debug: $(TARGET)

# Release build with optimizations
release: CXXFLAGS += -DNDEBUG -O3 -flto
release: LDFLAGS += -flto
release: $(TARGET)

# Run the program
run: $(TARGET)
	./$(TARGET)

# Run with example (clone a sample repository)
test: $(TARGET)
	@echo "Testing ASU Container System..."
	@echo "1. Cloning a sample repository..."
	./$(TARGET) clone https://github.com/octocat/Hello-World.git
	@echo ""
	@echo "2. Listing created .asu files..."
	ls -la *.asu
	@echo ""
	@echo "3. Getting info from first .asu file..."
	if [ -f *.asu ]; then ./$(TARGET) info $$(ls *.asu | head -1); fi
	@echo ""
	@echo "4. Running program from container..."
	if [ -f *.asu ]; then ./$(TARGET) run $$(ls *.asu | head -1); fi

# Start API server in background
server: $(TARGET)
	./$(TARGET) server 8080 &
	@echo "API Server started on port 8080"
	@echo "PID: $$!"
	@echo "To stop: kill $$!"

# API testing with curl (requires server to be running)
api-test:
	@echo "Testing API endpoints..."
	@echo "1. GET / (list containers)"
	curl -X GET http://localhost:8080/ | jq .
	@echo ""
	@echo "2. POST / (create container)"
	curl -X POST http://localhost:8080/ \
		-H "Content-Type: application/json" \
		-d '{"git_url": "https://github.com/octocat/Hello-World.git"}' | jq .

# Check dependencies
check-deps:
	@echo "Checking dependencies..."
	@echo -n "g++: "; which g++ || echo "NOT FOUND"
	@echo -n "git: "; which git || echo "NOT FOUND"
	@echo -n "libssl-dev: "; pkg-config --exists openssl && echo "OK" || echo "NOT FOUND"
	@echo -n "libarchive-dev: "; pkg-config --exists libarchive && echo "OK" || echo "NOT FOUND"
	@echo -n "libcpprest-dev: "; pkg-config --exists cpprest && echo "OK" || echo "NOT FOUND"

# Install dependencies (Ubuntu/Debian)
install-deps:
	@echo "Installing dependencies..."
	sudo apt update
	sudo apt install -y \
		build-essential \
		git \
		libssl-dev \
		libarchive-dev \
		libcpprest-dev \
		pkg-config \
		curl \
		jq
	@echo "Dependencies installed!"

# Generate documentation
docs:
	@echo "Generating documentation..."
	doxygen Doxyfile 2>/dev/null || echo "Doxygen not found, skipping documentation"

# Code formatting (requires clang-format)
format:
	find . -name '*.cpp' -o -name '*.hpp' | xargs clang-format -i

# Static analysis (requires cppcheck)
analyze:
	cppcheck --enable=all --std=c++17 *.cpp *.hpp

# Memory leak check (requires valgrind)
memcheck: $(TARGET)
	valgrind --leak-check=full --show-leak-kinds=all ./$(TARGET) help

# Performance profiling (requires gprof)
profile: CXXFLAGS += -pg
profile: LDFLAGS += -pg
profile: $(TARGET)
	./$(TARGET) help
	gprof $(TARGET) gmon.out > profile.txt
	@echo "Profile saved to profile.txt"

# Help message
help:
	@echo "ASU Container System - Build System"
	@echo "=================================="
	@echo ""
	@echo "Available targets:"
	@echo "  all          - Build the project (default)"
	@echo "  clean        - Remove build files"
	@echo "  install      - Install system-wide (requires sudo)"
	@echo "  uninstall    - Remove system installation (requires sudo)"
	@echo "  debug        - Build with debug symbols"
	@echo "  release      - Build optimized release version"
	@echo "  run          - Build and run the program"
	@echo "  test         - Run basic functionality tests"
	@echo "  server       - Start API server in background"
	@echo "  api-test     - Test API endpoints (requires server)"
	@echo "  check-deps   - Check for required dependencies"
	@echo "  install-deps - Install dependencies (Ubuntu/Debian)"
	@echo "  docs         - Generate documentation"
	@echo "  format       - Format code with clang-format"
	@echo "  analyze      - Run static code analysis"
	@echo "  memcheck     - Check for memory leaks"
	@echo "  profile      - Generate performance profile"
	@echo "  help         - Show this help message"
	@echo ""
	@echo "Examples:"
	@echo "  make                    # Build the project"
	@echo "  make clean all          # Clean and rebuild"
	@echo "  make install-deps all   # Install deps and build"
	@echo "  make test               # Build and test"
	@echo "  make server             # Start API server"
	@echo ""

# Prevent make from deleting intermediate files
.PRECIOUS: $(BUILD_DIR)/%.o

# Make sure these targets don't conflict with files
.PHONY: all clean install uninstall debug release run test server api-test check-deps install-deps docs format analyze memcheck profile help