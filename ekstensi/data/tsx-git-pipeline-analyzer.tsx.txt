import React, { useState, useEffect } from 'react';
import { Play, GitBranch, Download, Settings, Terminal, CheckCircle, AlertCircle, Clock } from 'lucide-react';

interface PipelineStage {
  id: string;
  nama: string;
  deskripsi: string;
  perintah: string[];
  status: 'pending' | 'running' | 'success' | 'error';
  durasi?: number;
  output?: string;
}

interface GitPipelineConfig {
  repositoryUrl: string;
  branch: string;
  buildScript: string;
  runScript: string;
  environment: string;
}

const GitPipelineAnalyzer: React.FC = () => {
  const [config, setConfig] = useState<GitPipelineConfig>({
    repositoryUrl: 'https://github.com/user/react-app.git',
    branch: 'main',
    buildScript: 'npm run build',
    runScript: 'npm start',
    environment: 'production'
  });

  const [currentStage, setCurrentStage] = useState<number>(0);
  const [isRunning, setIsRunning] = useState<boolean>(false);
  const [stages, setStages] = useState<PipelineStage[]>([
    {
      id: 'clone',
      nama: 'Clone Repository',
      deskripsi: 'Mengunduh kode sumber dari repository Git ke sistem lokal',
      perintah: ['git clone {{repositoryUrl}}', 'cd {{projectName}}'],
      status: 'pending'
    },
    {
      id: 'checkout',
      nama: 'Checkout Branch',
      deskripsi: 'Beralih ke branch yang ditentukan untuk deployment',
      perintah: ['git checkout {{branch}}', 'git pull origin {{branch}}'],
      status: 'pending'
    },
    {
      id: 'dependencies',
      nama: 'Install Dependencies',
      deskripsi: 'Menginstal semua paket dan library yang diperlukan',
      perintah: ['npm ci --production={{environment === "production"}}', 'npm audit fix'],
      status: 'pending'
    },
    {
      id: 'build',
      nama: 'Build Application',
      deskripsi: 'Kompilasi dan optimasi kode untuk deployment',
      perintah: ['{{buildScript}}', 'npm run test:ci'],
      status: 'pending'
    },
    {
      id: 'deploy',
      nama: 'Deploy & Run',
      deskripsi: 'Menjalankan aplikasi dalam environment yang ditentukan',
      perintah: ['{{runScript}}', 'pm2 start ecosystem.config.js'],
      status: 'pending'
    }
  ]);

  const [cpuMetrics, setCpuMetrics] = useState({
    usage: 45,
    memory: 2.4,
    processes: 12
  });

  const replacePlaceholders = (command: string): string => {
    return command
      .replace('{{repositoryUrl}}', config.repositoryUrl)
      .replace('{{branch}}', config.branch)
      .replace('{{buildScript}}', config.buildScript)
      .replace('{{runScript}}', config.runScript)
      .replace('{{environment}}', config.environment)
      .replace('{{projectName}}', config.repositoryUrl.split('/').pop()?.replace('.git', '') || 'project');
  };

  const simulateStage = async (stageIndex: number): Promise<void> => {
    const newStages = [...stages];
    newStages[stageIndex].status = 'running';
    setStages(newStages);

    // Simulasi durasi eksekusi yang realistis
    const duration = Math.random() * 3000 + 1000;
    await new Promise(resolve => setTimeout(resolve, duration));

    newStages[stageIndex].status = 'success';
    newStages[stageIndex].durasi = Math.round(duration / 1000);
    newStages[stageIndex].output = `Tahap ${newStages[stageIndex].nama} berhasil diselesaikan dalam ${Math.round(duration / 1000)}s`;
    
    setStages(newStages);
    
    // Update CPU metrics secara dinamis
    setCpuMetrics(prev => ({
      usage: Math.min(90, prev.usage + Math.random() * 20),
      memory: Math.min(8, prev.memory + Math.random() * 0.5),
      processes: prev.processes + Math.floor(Math.random() * 3)
    }));
  };

  const runPipeline = async (): Promise<void> => {
    setIsRunning(true);
    setCurrentStage(0);

    for (let i = 0; i < stages.length; i++) {
      setCurrentStage(i);
      await simulateStage(i);
    }

    setIsRunning(false);
    setCurrentStage(-1);
  };

  const resetPipeline = (): void => {
    setStages(stages.map(stage => ({ ...stage, status: 'pending', durasi: undefined, output: undefined })));
    setCurrentStage(0);
    setIsRunning(false);
    setCpuMetrics({ usage: 45, memory: 2.4, processes: 12 });
  };

  const getStatusIcon = (status: PipelineStage['status']) => {
    switch (status) {
      case 'running': return <Clock className="w-5 h-5 text-yellow-500 animate-spin" />;
      case 'success': return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'error': return <AlertCircle className="w-5 h-5 text-red-500" />;
      default: return <div className="w-5 h-5 rounded-full border-2 border-gray-300" />;
    }
  };

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gradient-to-br from-slate-50 to-blue-50 min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2 flex items-center gap-3">
          <GitBranch className="text-blue-600" />
          Analisis Pipeline Git dengan TSX
        </h1>
        <p className="text-gray-600 text-lg">
          Pemodelan Sistematis Proses DevOps: Dari Clone Repository hingga Eksekusi Program
        </p>
      </div>

      {/* Konfigurasi Pipeline */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
          <Settings className="text-blue-600" />
          Konfigurasi Pipeline
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              URL Repository
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={config.repositoryUrl}
              onChange={(e) => setConfig({...config, repositoryUrl: e.target.value})}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Branch Target
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={config.branch}
              onChange={(e) => setConfig({...config, branch: e.target.value})}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Build Script
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={config.buildScript}
              onChange={(e) => setConfig({...config, buildScript: e.target.value})}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Run Script
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={config.runScript}
              onChange={(e) => setConfig({...config, runScript: e.target.value})}
            />
          </div>
        </div>
      </div>

      {/* Metrik CPU & Sistem */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">
          Metrik Performa CPU & Sistem
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">CPU Usage</span>
              <span className="text-lg font-bold text-blue-600">{cpuMetrics.usage.toFixed(1)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${cpuMetrics.usage}%` }}
              ></div>
            </div>
          </div>
          <div className="bg-green-50 p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Memory Usage</span>
              <span className="text-lg font-bold text-green-600">{cpuMetrics.memory.toFixed(1)} GB</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-green-600 h-2 rounded-full transition-all duration-500"
                style={{ width: `${(cpuMetrics.memory / 8) * 100}%` }}
              ></div>
            </div>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm font-medium text-gray-700">Active Processes</span>
              <span className="text-lg font-bold text-purple-600">{cpuMetrics.processes}</span>
            </div>
            <div className="text-xs text-gray-500">
              Node.js, npm, git processes
            </div>
          </div>
        </div>
      </div>

      {/* Tahapan Pipeline */}
      <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-semibold text-gray-800">
            Tahapan Eksekusi Pipeline
          </h2>
          <div className="flex gap-3">
            <button
              onClick={runPipeline}
              disabled={isRunning}
              className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <Play className="w-4 h-4" />
              {isRunning ? 'Menjalankan...' : 'Jalankan Pipeline'}
            </button>
            <button
              onClick={resetPipeline}
              disabled={isRunning}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              Reset
            </button>
          </div>
        </div>

        <div className="space-y-4">
          {stages.map((stage, index) => (
            <div 
              key={stage.id}
              className={`border rounded-lg p-4 transition-all duration-300 ${
                currentStage === index ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
              }`}
            >
              <div className="flex items-start gap-3">
                <div className="flex-shrink-0 mt-1">
                  {getStatusIcon(stage.status)}
                </div>
                <div className="flex-grow min-w-0">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="font-semibold text-gray-800">{stage.nama}</h3>
                    {stage.durasi && (
                      <span className="text-xs bg-gray-100 px-2 py-1 rounded">
                        {stage.durasi}s
                      </span>
                    )}
                  </div>
                  <p className="text-gray-600 text-sm mb-3">{stage.deskripsi}</p>
                  
                  <div className="bg-gray-50 rounded-md p-3">
                    <div className="flex items-center gap-2 mb-2">
                      <Terminal className="w-4 h-4 text-gray-500" />
                      <span className="text-xs font-medium text-gray-500 uppercase">
                        Perintah Eksekusi
                      </span>
                    </div>
                    <div className="space-y-1">
                      {stage.perintah.map((cmd, cmdIndex) => (
                        <code 
                          key={cmdIndex}
                          className="block text-sm bg-gray-800 text-green-400 px-3 py-1 rounded font-mono"
                        >
                          $ {replacePlaceholders(cmd)}
                        </code>
                      ))}
                    </div>
                  </div>

                  {stage.output && (
                    <div className="mt-3 p-2 bg-green-50 border border-green-200 rounded text-sm text-green-800">
                      {stage.output}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Analisis Teknis */}
      <div className="bg-white rounded-xl shadow-lg p-6">
        <h2 className="text-xl font-semibold text-gray-800 mb-4">
          Analisis Teknis: Pemodelan Pipeline dengan TSX
        </h2>
        
        <div className="prose max-w-none text-gray-700">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold text-lg mb-3 text-blue-600">
                Kerangka Metodologi Pipeline
              </h3>
              <ul className="space-y-2 text-sm">
                <li>• <strong>State Management:</strong> Menggunakan React hooks untuk tracking status eksekusi</li>
                <li>• <strong>Asynchronous Processing:</strong> Promise-based execution dengan error handling</li>
                <li>• <strong>Real-time Monitoring:</strong> Live updates metrik CPU dan memory usage</li>
                <li>• <strong>Configuration Management:</strong> Dynamic placeholder replacement untuk fleksibilitas</li>
              </ul>
            </div>
            
            <div>
              <h3 className="font-semibold text-lg mb-3 text-green-600">
                Optimasi Performa Sistem
              </h3>
              <ul className="space-y-2 text-sm">
                <li>• <strong>Resource Allocation:</strong> Monitoring penggunaan CPU dan memory secara real-time</li>
                <li>• <strong>Process Management:</strong> Tracking active processes untuk optimasi beban kerja</li>
                <li>• <strong>Caching Strategy:</strong> npm ci untuk instalasi dependencies yang lebih efisien</li>
                <li>• <strong>Error Recovery:</strong> Automated rollback dan health checks</li>
              </ul>
            </div>
          </div>
          
          <div className="mt-6 p-4 bg-blue-50 border-l-4 border-blue-500">
            <h4 className="font-semibold text-blue-800 mb-2">
              Insight Kunci: Arsitektur Pipeline Modern
            </h4>
            <p className="text-sm text-blue-700">
              TSX memungkinkan pemodelan pipeline CI/CD yang komprehensif dengan menggabungkan type safety TypeScript 
              dan reaktivitas React. Pendekatan ini memberikan visibilitas real-time terhadap setiap tahap eksekusi, 
              dari clone repository hingga deployment, sambil memantau performa sistem secara kontinyu.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GitPipelineAnalyzer;